#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h>
#include <string.h>

// Function to generate a random key of given length
void generate_key(int *key, size_t length) {
    for (size_t i = 0; i < length; ++i) {
        key[i] = rand() % 26; // Random number between 0 and 25
    }
}

// Function to encrypt plaintext using the one-time pad Vigenère cipher
void encrypt(const char *plaintext, const int *key, char *ciphertext, size_t length) {
    for (size_t i = 0; i < length; ++i) {
        if (isalpha(plaintext[i])) {
            int shift = key[i];
            if (isupper(plaintext[i])) {
                ciphertext[i] = (plaintext[i] - 'A' + shift) % 26 + 'A';
            } else {
                ciphertext[i] = (plaintext[i] - 'a' + shift) % 26 + 'a';
            }
        } else {
            ciphertext[i] = plaintext[i]; // Non-alphabetic characters are not changed
        }
    }
    ciphertext[length] = '\0'; // Null-terminate the ciphertext
}

// Function to decrypt ciphertext using the one-time pad Vigenère cipher
void decrypt(const char *ciphertext, const int *key, char *plaintext, size_t length) {
    for (size_t i = 0; i < length; ++i) {
        if (isalpha(ciphertext[i])) {
            int shift = key[i];
            if (isupper(ciphertext[i])) {
                plaintext[i] = (ciphertext[i] - 'A' - shift + 26) % 26 + 'A';
            } else {
                plaintext[i] = (ciphertext[i] - 'a' - shift + 26) % 26 + 'a';
            }
        } else {
            plaintext[i] = ciphertext[i]; // Non-alphabetic characters are not changed
        }
    }
    plaintext[length] = '\0'; // Null-terminate the plaintext
}

int main() {
    // Seed the random number generator
    srand(time(NULL));

    // Example plaintext
    const char *plaintext = "HELLO WORLD";
    size_t length = strlen(plaintext);

    // Generate random key of the same length as the plaintext
    int *key = (int *)malloc(length * sizeof(int));
    if (key == NULL) {
        perror("Failed to allocate memory for key");
        return 1;
    }
    generate_key(key, length);

    // Encrypt the plaintext
    char *ciphertext = (char *)malloc((length + 1) * sizeof(char));
    if (ciphertext == NULL) {
        perror("Failed to allocate memory for ciphertext");
        free(key);
        return 1;
    }
    encrypt(plaintext, key, ciphertext, length);
    printf("Ciphertext: %s\n", ciphertext);

    // Decrypt the ciphertext
    char *decryptedtext = (char *)malloc((length + 1) * sizeof(char));
    if (decryptedtext == NULL) {
        perror("Failed to allocate memory for decrypted text");
        free(ciphertext);
        free(key);
        return 1;
    }
    decrypt(ciphertext, key, decryptedtext, length);
    printf("Decrypted text: %s\n", decryptedtext);

    // Clean up
    free(ciphertext);
    free(decryptedtext);
    free(key);

    return 0;
}
output:
Ciphertext: HKNKQ XSCN
Decrypted text: HELLO WORLD
