#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Function to generate the Playfair key matrix
void generateKeyMatrix(const char *keyword, char keyMatrix[SIZE][SIZE]) {
    int used[26] = {0};
    int row = 0, col = 0;

    for (int i = 0; keyword[i] != '\0'; i++) {
        char ch = toupper(keyword[i]);
        if (ch == 'J') ch = 'I'; // Treat J as I
        if (!used[ch - 'A']) {
            keyMatrix[row][col] = ch;
            used[ch - 'A'] = 1;
            col++;
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }

    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue; // Skip J
        if (!used[ch - 'A']) {
            keyMatrix[row][col] = ch;
            used[ch - 'A'] = 1;
            col++;
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }
}

// Function to find the position of a character in the key matrix
void findPosition(char keyMatrix[SIZE][SIZE], char ch, int *row, int *col) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (keyMatrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to decrypt the Playfair cipher
void decryptPlayfair(const char *ciphertext, char *plaintext, char keyMatrix[SIZE][SIZE]) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i += 2) {
        char ch1 = toupper(ciphertext[i]);
        char ch2 = toupper(ciphertext[i + 1]);
        if (ch1 == 'J') ch1 = 'I'; // Treat J as I
        if (ch2 == 'J') ch2 = 'I'; // Treat J as I

        int row1, col1, row2, col2;
        findPosition(keyMatrix, ch1, &row1, &col1);
        findPosition(keyMatrix, ch2, &row2, &col2);

        if (row1 == row2) {
            // Same row, move left
            plaintext[i] = keyMatrix[row1][(col1 + SIZE - 1) % SIZE];
            plaintext[i + 1] = keyMatrix[row2][(col2 + SIZE - 1) % SIZE];
        } else if (col1 == col2) {
            // Same column, move up
            plaintext[i] = keyMatrix[(row1 + SIZE - 1) % SIZE][col1];
            plaintext[i + 1] = keyMatrix[(row2 + SIZE - 1) % SIZE][col2];
        } else {
            // Rectangle swap
            plaintext[i] = keyMatrix[row1][col2];
            plaintext[i + 1] = keyMatrix[row2][col1];
        }
    }
    plaintext[len] = '\0'; // Null-terminate the plaintext
}

int main() {
    // Assuming the keyword is known
    const char *keyword = "KEYWORD";
    char keyMatrix[SIZE][SIZE];
    generateKeyMatrix(keyword, keyMatrix);

    printf("Key Matrix:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", keyMatrix[i][j]);
        }
        printf("\n");
    }

    const char *ciphertext = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGONECUZWRGDSONSXBOUYWRHEBAAHYUSEDQ";
    char plaintext[200];

    decryptPlayfair(ciphertext, plaintext, keyMatrix);
    printf("Ciphertext: %s\n", ciphertext);
    printf("Decrypted text: %s\n", plaintext);

    return 0;
}
output:
Key Matrix:
K E Y W O
R D A B C
F G H I L
M N P Q S
T U V X Z
Ciphertext: KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGONECUZWRGDSONSXBOUYWRHEBAAHYUSEDQ
Decrypted text: WTGWEVDKDWXOYGKYAKZTGYKHMODKGYLEKHBXZZZTZCOMOABHSYCWUKLXESZVAWDQUFESODTXKBDELZMQQWEZEYAFWDDDAVZNUEN
