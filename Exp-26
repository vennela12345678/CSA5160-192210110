#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>

// Function to compute gcd using Euclid's algorithm
uint64_t gcd(uint64_t a, uint64_t b) {
    while (b != 0) {
        uint64_t t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Function to compute modular exponentiation
uint64_t mod_exp(uint64_t base, uint64_t exp, uint64_t mod) {
    uint64_t result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

// Function to compute the modular multiplicative inverse using Extended Euclidean algorithm
uint64_t mod_inv(uint64_t a, uint64_t m) {
    uint64_t m0 = m, t, q;
    uint64_t x0 = 0, x1 = 1;
    
    if (m == 1) return 0;

    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m;
        a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    
    if (x1 < 0) x1 += m0;
    
    return x1;
}

// Function to generate RSA keys
void generate_keys(uint64_t p, uint64_t q, uint64_t *n, uint64_t *e, uint64_t *d) {
    *n = p * q;
    uint64_t phi = (p - 1) * (q - 1);

    // Choose e such that 1 < e < phi and gcd(e, phi) = 1
    *e = 65537; // Commonly used value for e
    while (gcd(*e, phi) != 1) {
        (*e)++;
    }

    // Compute d as the modular multiplicative inverse of e mod phi
    *d = mod_inv(*e, phi);
}

// Function to encrypt a message
uint64_t encrypt(uint64_t message, uint64_t e, uint64_t n) {
    return mod_exp(message, e, n);
}

// Function to decrypt a message
uint64_t decrypt(uint64_t ciphertext, uint64_t d, uint64_t n) {
    return mod_exp(ciphertext, d, n);
}

int main() {
    uint64_t p = 61; // Example prime number
    uint64_t q = 53; // Example prime number
    uint64_t n, e, d;

    // Generate RSA keys
    generate_keys(p, q, &n, &e, &d);
    printf("Public Key: (e: %" PRIu64 ", n: %" PRIu64 ")\n", e, n);
    printf("Private Key: (d: %" PRIu64 ", n: %" PRIu64 ")\n", d, n);

    uint64_t message = 65; // Example message
    printf("Original Message: %" PRIu64 "\n", message);

    // Encrypt the message
    uint64_t ciphertext = encrypt(message, e, n);
    printf("Encrypted Message: %" PRIu64 "\n", ciphertext);

    // Decrypt the message
    uint64_t decrypted_message = decrypt(ciphertext, d, n);
    printf("Decrypted Message: %" PRIu64 "\n", decrypted_message);

    return 0;
}
output:
Public Key: (e: 65537, n: 3233)
Private Key: (d: 18446744073709551249, n: 3233)
Original Message: 65
Encrypted Message: 2790
Decrypted Message: 1772
