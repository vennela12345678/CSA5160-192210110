#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Predefined key matrix
char keyMatrix[SIZE][SIZE] = {
    {'M', 'F', 'H', 'I', 'K'},
    {'U', 'N', 'O', 'P', 'Q'},
    {'Z', 'V', 'W', 'X', 'Y'},
    {'E', 'L', 'A', 'R', 'G'},
    {'D', 'S', 'T', 'B', 'C'}
};

// Function to find the position of a character in the key matrix
void findPosition(char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';  // Treat J as I
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (keyMatrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to format the plaintext for encryption
void formatPlaintext(const char *plaintext, char *formatted) {
    int len = strlen(plaintext);
    int j = 0;
    for (int i = 0; i < len; i++) {
        if (isalpha(plaintext[i])) {
            formatted[j++] = toupper(plaintext[i]);
        }
    }
    formatted[j] = '\0';

    // Insert 'X' between repeated characters in digraphs and at the end if necessary
    len = strlen(formatted);
    char temp[200];
    int k = 0;
    for (int i = 0; i < len; i++) {
        temp[k++] = formatted[i];
        if (i + 1 < len && formatted[i] == formatted[i + 1]) {
            temp[k++] = 'X';
        }
    }
    if (k % 2 != 0) {
        temp[k++] = 'X';  // Padding with X if length is odd
    }
    temp[k] = '\0';
    strcpy(formatted, temp);
}

// Function to encrypt the plaintext using the Playfair cipher
void encryptPlayfair(const char *plaintext, char *ciphertext) {
    int len = strlen(plaintext);
    for (int i = 0; i < len; i += 2) {
        char ch1 = plaintext[i];
        char ch2 = plaintext[i + 1];
        int row1, col1, row2, col2;
        findPosition(ch1, &row1, &col1);
        findPosition(ch2, &row2, &col2);

        if (row1 == row2) {
            // Same row, move right
            ciphertext[i] = keyMatrix[row1][(col1 + 1) % SIZE];
            ciphertext[i + 1] = keyMatrix[row2][(col2 + 1) % SIZE];
        } else if (col1 == col2) {
            // Same column, move down
            ciphertext[i] = keyMatrix[(row1 + 1) % SIZE][col1];
            ciphertext[i + 1] = keyMatrix[(row2 + 1) % SIZE][col2];
        } else {
            // Rectangle swap
            ciphertext[i] = keyMatrix[row1][col2];
            ciphertext[i + 1] = keyMatrix[row2][col1];
        }
    }
    ciphertext[len] = '\0';  // Null-terminate the ciphertext
}

int main() {
    const char *plaintext = "Must see you over Cadogan West. Coming at once.";
    char formatted[200];
    char ciphertext[200];

    formatPlaintext(plaintext, formatted);
    printf("Formatted plaintext: %s\n", formatted);

    encryptPlayfair(formatted, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);

    return 0;
}
output:
Formatted plaintext: MUSTSEXEYOUOVERCADOGANWESTCOMINGATONCE
Ciphertext: UZTBDLZRWQNPZLGBETQALOZATBTQFKQLTHPODG
